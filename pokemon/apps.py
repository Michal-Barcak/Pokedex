# from django.apps import AppConfig


# class PokemonConfig(AppConfig):
#     default_auto_field = "django.db.models.BigAutoField"
#     name = "pokemon"


from django.apps import AppConfig
from django.core.management import call_command
import logging

logger = logging.getLogger(__name__)

class PokemonConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pokemon'
    
    def ready(self):
        """Spust√≠ sa pri ≈°tarte Django aplik√°cie"""
        try:
            from .models import Pokemon
            pokemon_count = Pokemon.objects.count()
            
            if pokemon_count < 10:  # Ak m√°me menej ako 10 pok√©monov
                logger.info("üîÑ Sp√∫≈°≈•am automatick√∫ synchroniz√°ciu pok√©monov...")
                call_command('sync_pokemon', '--limit=151')
                logger.info("‚úÖ Automatick√° synchroniz√°cia dokonƒçen√°")
            else:
                logger.info(f"‚ÑπÔ∏è Datab√°za u≈æ obsahuje {pokemon_count} pok√©monov")
                
        except Exception as e:
            # Tabuƒæky e≈°te neexistuj√∫ alebo in√° chyba
            logger.warning(f"‚ö†Ô∏è Nem√¥≈æem spusti≈• sync: {e}")
